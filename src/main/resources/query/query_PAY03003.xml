<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="PAY03003">
	
	<!-- 검증 리스트 조회 -->
	<select id="PAY0300301S" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select
			t2.*
			, mileageID as "mileageID"
			, venueCD as "venueCD"
			, venueNm as "venueNm"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','VENUEGRADCD',venueGradCD,null) as "venueGradCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','SEGMENTCD',segmentCD,null) as "segmentCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','SUBSEGMENTCD',subSegmentCD,null) as "subSegmentCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','ADDRTPCD1',addrTpCD1,null) as "addrTpCD1Name"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','ADDRTPCD2',addrTpCD2,null) as "addrTpCD2Name"
			, contractDateFrom as "contractDateFrom"
			, contractDateTo as "contractDateTo"
			, contractMonthCt as "contractMonthCt"
			, apAmt as "apAmt"
			, targetRate as "targetRate"
			, msTargetRate as "msTargetRate"
			, tcontractQty as "tcontractQty"
			, gsvAmt as "gsvAmt"
			, gsvRate as "gsvRate"
			, contractAmt as "contractAmt"
			, contractTaxAmt as "contractTaxAmt"
			, addContractAmt as "addContractAmt"
			, addContractTaxAmt as "addContractTaxAmt"
			<!-- 약정금액추가 2016.10.10 -->
			, stipulationAmt as "stipulationAmt"
			, keymanAmt as "keymanAmt"
			, payRequestDate as "payRequestDate"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','MILEAGESTATECD',mileageStateCD,null) as "mileageStateCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','MILEAGEPAYTPCD',mileagePayTPCD,null) as "mileagePayTPCDName"
			, transferDate as "transferDate"
			, commt as "commt"
			, mileageStateCD as "mileageStateCD"
			, mileagePayTPCD as "mileagePayTPCD"
			, verifyErrCommt as "verifyErrCommt"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','VERIFYSTATECD',verifyStateCD,null) as "verifyStateCDName"
			, verifyStateCD as "verifyStateCD"
		from 
		(
			select
				t.*
				, rank() over(
					order by
						mileageID
				) as "rowNum"
				, floor((rank() over(
					order by
						mileageID
				)-1)/#displayNum#+1) as pageNum
			from
			(
				select
					a.mileageID
					, a.venueCD
					, b.venueNm
					, b.venueGradCD
					, b.segmentCD
					, b.subSegmentCD
					, b.addrTpCD1
					, b.addrTpCD2
					, a.contractDateFrom
					, a.contractDateTo
					, a.contractMonthCt
					, a.apAmt
					, a.targetRate
					, a.msTargetRate
					, a.tcontractQty
					, a.gsvAmt
					, a.gsvRate
					, a.contractAmt
					, a.contractTaxAmt
					, a.addContractAmt
					, a.addContractTaxAmt
					, a.stipulationAmt
					, (select sum(payAmt) from GMIL03MT where mileageID=a.mileageID and payTpCD='ORG') as keymanAmt
					, a.payRequestDate
					, a.mileageStateCD
					, a.mileagePayTPCD
					, a.transferDate
					, a.commt
					, verifyErrCommt
					, verifyStateCD
					, (
						select max(apprDate)
						from GMIL05MT
						where
							mileageID  = a.mileageID
						and apprTpID = #apprTpID#
					) as lastApprDate
				from GMIL02MT a
				inner join GVEN01MT b
					on a.venueCD = b.venueCD
				where
					<![CDATA[
					a.contractDateTo >= #contractDateFrom#
					and a.contractDateFrom <= #contractDateTo#
					]]>
					and verifyStateCD in (
						select comCode
						from F_CODE
						where
							codediv='VERIFYSTATECD'
							and activeFlg = 'U'
							and useYN = 'Y'
							and attrib03 = 'VELEX'
					)
					<isPropertyAvailable property="payRequestDate">
						<isNotEmpty prepend="and" property="payRequestDate">
							payRequestDate = #payRequestDate#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="mileageStateCD">
						<isNotEmpty prepend="and" property="mileageStateCD">
							mileageStateCD = #mileageStateCD#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="periodLongTerm">
						<isNotEmpty prepend="and" property="periodLongTerm">
							a.contractMonthCt <![CDATA[>=]]> #periodLongTerm#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="periodShortTerm">
						<isNotEmpty prepend="and" property="periodShortTerm">
							a.contractMonthCt <![CDATA[<]]> #periodShortTerm#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="venue_S">
						<isNotEmpty prepend="and" property="venue_S">
							b.venueCD = #venue_S#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="rageSphereCD_S">
						<isNotEmpty prepend="and" property="rageSphereCD_S">
							a.rageSphereCD = #rageSphereCD_S#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="officeCD_S">
						<isNotEmpty prepend="and" property="officeCD_S">
							a.officeCD = #officeCD_S#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="verifyStateCD">
						<isNotEmpty prepend="and" property="verifyStateCD">
							verifyStateCD = #verifyStateCD#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="mileagePayTPCD">
						<isNotEmpty prepend="and" property="mileagePayTPCD">
							mileagePayTPCD = #mileagePayTPCD#
						</isNotEmpty>
					</isPropertyAvailable>
			) t
			<isNotEmpty property="lastApprDateStartDate">
				<isNotEmpty property="lastApprDateEndDate">
					where lastApprDate between #lastApprDateStartDate# and #lastApprDateEndDate#
				</isNotEmpty>
			</isNotEmpty>
		) t2
		where 1=1
			<isPropertyAvailable property="pageNum">
				<isNotEmpty prepend="and" property="pageNum">
					pageNum = #pageNum#
				</isNotEmpty>
			</isPropertyAvailable>
	</select>
	
	<select id="PAY0300304S" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select
			count(*) as "totalCount"
		from (
			select
				t.*
			from
			(
				select
					a.mileageID
					, a.venueCD
					, b.venueNm
					, b.venueGradCD
					, b.segmentCD
					, b.subSegmentCD
					, b.addrTpCD1
					, b.addrTpCD2
					, a.contractDateFrom
					, a.contractDateTo
					, a.contractMonthCt
					, a.apAmt
					, a.targetRate
					, a.msTargetRate
					, a.tcontractQty
					, a.gsvAmt
					, a.gsvRate
					, a.contractAmt
					, a.contractTaxAmt
					, a.addContractAmt
					, a.addContractTaxAmt
					, a.stipulationAmt
					, (select sum(payAmt) from GMIL03MT where mileageID=a.mileageID and payTpCD='ORG') as keymanAmt
					, a.payRequestDate
					, a.mileageStateCD
					, a.mileagePayTPCD
					, a.transferDate
					, a.commt
					, verifyErrCommt
					, verifyStateCD
					, (
						select max(apprDate)
						from GMIL05MT
						where
							mileageID  = a.mileageID
						and apprTpID = #apprTpID#
					) as lastApprDate
				from GMIL02MT a
				inner join GVEN01MT b
					on a.venueCD = b.venueCD
				where
					<![CDATA[
					a.contractDateTo >= #contractDateFrom#
					and a.contractDateFrom <= #contractDateTo#
					]]>
					and verifyStateCD in (
						select comCode
						from F_CODE
						where
							codediv='VERIFYSTATECD'
							and activeFlg = 'U'
							and useYN = 'Y'
							and attrib03 = 'VELEX'
					)
					<isPropertyAvailable property="payRequestDate">
						<isNotEmpty prepend="and" property="payRequestDate">
							payRequestDate = #payRequestDate#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="mileageStateCD">
						<isNotEmpty prepend="and" property="mileageStateCD">
							mileageStateCD = #mileageStateCD#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="periodLongTerm">
						<isNotEmpty prepend="and" property="periodLongTerm">
							a.contractMonthCt <![CDATA[>=]]> #periodLongTerm#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="periodShortTerm">
						<isNotEmpty prepend="and" property="periodShortTerm">
							a.contractMonthCt <![CDATA[<]]> #periodShortTerm#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="venue_S">
						<isNotEmpty prepend="and" property="venue_S">
							b.venueCD = #venue_S#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="rageSphereCD_S">
						<isNotEmpty prepend="and" property="rageSphereCD_S">
							a.rageSphereCD = #rageSphereCD_S#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="officeCD_S">
						<isNotEmpty prepend="and" property="officeCD_S">
							a.officeCD = #officeCD_S#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="verifyStateCD">
						<isNotEmpty prepend="and" property="verifyStateCD">
							verifyStateCD = #verifyStateCD#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="mileagePayTPCD">
						<isNotEmpty prepend="and" property="mileagePayTPCD">
							mileagePayTPCD = #mileagePayTPCD#
						</isNotEmpty>
					</isPropertyAvailable>
			) t
			<isNotEmpty property="lastApprDateStartDate">
				<isNotEmpty property="lastApprDateEndDate">
					and lastApprDate between #lastApprDateStartDate# and #lastApprDateEndDate#
				</isNotEmpty>
			</isNotEmpty>
		)
	</select>
	
	<!-- 검증완료시 메일대상자(자신제외, apprTpID가 plan/result승인라인과 검증라인 합집합)
	2014.08.04. taejoon.jang, VALEX담당자는 EMPID가 없어 자신제외 쿼리 없음
	-->
	<select id="PAY0300302S" parameterClass="com.kia.mil.model.GMIL01MT" resultClass="java.util.LinkedHashMap">
		select
			empID as "empID"
			, max(empNm) as "empNm"
			, max(emailAddr) as "emailAddr"
		from (
			select
				b.empID
				, empNm
				, emailAddr
			from GMIL02MT a
			inner join GMIL05MT b
				on a.mileageID = b.mileageID
				and b.apprTpID = #apprTpID#
			inner join GEMP01MT c
				on b.empID = c.empID
			where
				a.mileageID = #mileageID#
				and b.apprTpID in (
					#apprTpID#, #apprTpID_bef#
				)
				<!--2014.08.04. taejoon.jang
 				and b.empID != #empID# -->
		)
		group by empID
	</select>
	
	<!-- 검증완료시 검증상태 갱신 -->
	<update id="PAY0300301U" parameterClass="com.kia.mil.model.GMIL01MT">
		update GMIL02MT
		set
			verifyStateCD = #verifyStateCD#
			, verifyErrCommt = #verifyErrCommt#
			, payStateCD = #payStateCD#
			, chgID = #userID#
			, chgDate = sysdate
		where
			mileageID = #mileageID#
	</update>
	
	<!-- 검증완료시 선지원차감내역 갱신 -->
	<update id="PAY0300302U" parameterClass="com.kia.mil.model.GMIL01MT">
	</update>
	
	<!-- 검증 엑셀 조회 -->
	<select id="PAY0300303S" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select
			  mileageID as "mileageID"
			, venueCD as "venueCD"
			, venueNm as "venueNm"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','VENUEGRADCD',venueGradCD,null) as "venueGradCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','SEGMENTCD',segmentCD,null) as "segmentCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','SUBSEGMENTCD',subSegmentCD,null) as "subSegmentCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','ADDRTPCD1',addrTpCD1,null) as "addrTpCD1Name"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','ADDRTPCD2',addrTpCD2,null) as "addrTpCD2Name"
			, contractDateFrom as "contractDateFrom"
			, contractDateTo as "contractDateTo"
			, contractMonthCt as "contractMonthCt"
			, apAmt as "apAmt"
			, targetRate as "targetRate"
			, msTargetRate as "msTargetRate"
			, tcontractQty as "tcontractQty"
			, gsvAmt as "gsvAmt"
			, gsvRate as "gsvRate"
			, contractAmt as "contractAmt"
			, contractTaxAmt as "contractTaxAmt"
			, addContractAmt as "addContractAmt"
			, addContractTaxAmt as "addContractTaxAmt"
			<!-- 약정금액추가 2016.10.10 -->
			, stipulationAmt as "stipulationAmt"
			, keymanAmt as "keymanAmt"
			, payRequestDate as "payRequestDate"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','MILEAGESTATECD',mileageStateCD,null) as "mileageStateCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','MILEAGEPAYTPCD',mileagePayTPCD,null) as "mileagePayTPCDName"
			, transferDate as "transferDate"
			, commt as "commt"
			, mileageStateCD as "mileageStateCD"
			, mileagePayTPCD as "mileagePayTPCD"
			, verifyErrCommt as "verifyErrCommt"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','VERIFYSTATECD',verifyStateCD,null) as "verifyStateCDName"
			, verifyStateCD as "verifyStateCD"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','KINDTPCD5',kindTpCD5,null) as "kindTpCD5Name"
			, prdNm as "prdNm"
			, factoryPrice as "factoryPrice"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','QTYUNITCD',qtyUnitCD,null) as "qtyUnitCDName"
			, contractQty as "contractQty"
			, plnEnterQty as "plnEnterQty"
			, plnEnterUnitAmt as "plnEnterUnitAmt"
			, plnAddEnterUnitAmt as "plnAddEnterUnitAmt"
			, rltEnterQty as "rltEnterQty"
			, rltEnterUnitAmt as "rltEnterUnitAmt"
			, payAmt as "payAmt"
			, addEnterUnitAmt as "addEnterUnitAmt"
			, addPayAmt as "addPayAmt"
		from 
		(
			select
				t.*
			from
			(
				select
					a.mileageID
					, a.venueCD
					, b.venueNm
					, b.venueGradCD
					, b.segmentCD
					, b.subSegmentCD
					, b.addrTpCD1
					, b.addrTpCD2
					, a.contractDateFrom
					, a.contractDateTo
					, a.contractMonthCt
					, a.apAmt
					, a.targetRate
					, a.msTargetRate
					, a.tcontractQty
					, a.gsvAmt
					, a.gsvRate
					, a.contractAmt
					, a.contractTaxAmt
					, a.addContractAmt
					, a.addContractTaxAmt
					, a.stipulationAmt
					, (select sum(payAmt) from GMIL03MT where mileageID=a.mileageID and payTpCD='ORG') as keymanAmt
					, a.payRequestDate
					, a.mileageStateCD
					, a.mileagePayTPCD
					, a.transferDate
					, a.commt
					, verifyErrCommt
					, verifyStateCD
					, (
						select max(apprDate)
						from GMIL05MT
						where
							mileageID  = a.mileageID
					) as lastApprDate
					, d.kindTpCD5
					, d.prdNm
					, c.factoryPrice
					, d.qtyUnitCD
					, c.contractQty
					, c.plnEnterQty
					, c.plnEnterUnitAmt
					, c.plnAddEnterUnitAmt
					, c.rltEnterQty
					, c.rltEnterUnitAmt
					, c.payAmt
					, c.addEnterUnitAmt
					, c.addPayAmt
				from GMIL02MT a
				inner join GVEN01MT b
					on a.venueCD = b.venueCD
				inner join GMIL02DT c
					on a.mileageID = c.mileageID
				inner join GPRD01MT d
					on c.prdCD = d.prdCD
				where
					<![CDATA[
					a.contractDateTo >= #contractDateFrom#
					and a.contractDateFrom <= #contractDateTo#
					]]>
					and verifyStateCD in (
						select comCode
						from F_CODE
						where
							codediv='VERIFYSTATECD'
							and activeFlg = 'U'
							and useYN = 'Y'
							and attrib03 = 'VELEX'
					)
					<isPropertyAvailable property="payRequestDate">
						<isNotEmpty prepend="and" property="payRequestDate">
							payRequestDate = #payRequestDate#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="mileageStateCD">
						<isNotEmpty prepend="and" property="mileageStateCD">
							mileageStateCD = #mileageStateCD#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="periodLongTerm">
						<isNotEmpty prepend="and" property="periodLongTerm">
							a.contractMonthCt <![CDATA[>=]]> #periodLongTerm#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="periodShortTerm">
						<isNotEmpty prepend="and" property="periodShortTerm">
							a.contractMonthCt <![CDATA[<]]> #periodShortTerm#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="venue_S">
						<isNotEmpty prepend="and" property="venue_S">
							b.venueCD = #venue_S#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="rageSphereCD_S">
						<isNotEmpty prepend="and" property="rageSphereCD_S">
							a.rageSphereCD = #rageSphereCD_S#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="officeCD_S">
						<isNotEmpty prepend="and" property="officeCD_S">
							a.officeCD = #officeCD_S#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="verifyStateCD">
						<isNotEmpty prepend="and" property="verifyStateCD">
							verifyStateCD = #verifyStateCD#
						</isNotEmpty>
					</isPropertyAvailable>
					<isPropertyAvailable property="mileagePayTPCD">
						<isNotEmpty prepend="and" property="mileagePayTPCD">
							mileagePayTPCD = #mileagePayTPCD#
						</isNotEmpty>
					</isPropertyAvailable>
			) t
			<isNotEmpty property="lastApprDateStartDate">
				<isNotEmpty property="lastApprDateEndDate">
					and lastApprDate between #lastApprDateStartDate# and #lastApprDateEndDate#
				</isNotEmpty>
			</isNotEmpty>
		) t2
		order by mileageID
	</select>

	<select id="PAY0300305S" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select
			eventYM as "eventYM"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','KINDTPCD5',kindTpCD5,null) as "kindTpCD5Name"
			, prdNm as "prdNm"
			, factoryPrice as "factoryPrice"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','QTYUNITCD',qtyUnitCD,null) as "qtyUnitCDName"
			, enterQty as "planQty"
			, rltEnterQty as "resultQty"
			, rltEnterUnitAmt as "resultUnitAmt"
			, addEnterUnitAmt as "addEnterUnitAmt"
			, payAmt as "payAmt"
			, addPayAmt as "addPayAmt"
			, prdCD as "prdCD"
		from (
			select
				a.eventYM
				, b.kindTpCD5
				, b.prdNm
				, a.factoryPrice
				, b.qtyUnitCD
				, c.enterQty
        		, c.EnterUnitAmt
				, a.rltEnterQty
				, a.rltEnterUnitAmt
        		, a.addEnterUnitAmt
				, a.payAmt
        		, a.addPayAmt
				, a.prdCD
			from GMIL02DT a
			inner join GPRD01MT b
				on a.prdCD = b.prdCD
			inner join GMIL01DT c
				on a.mileageID = c.mileageID
				and a.prdCD = c.prdCD
			where
				a.mileageID = #mileageID#
		) t
		order by prdCD
	</select>

	<!-- 승인상태조회 -->
	<select id="PAY0300307S" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select
			apprGrpNm as "apprGrpNm"
			, empID as "empID"
			, (select empNm from GEMP01MT where empID = t.empID) as "empNm"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','MILEAGESTATECD',mileageStateCD,null) as "apprStateCDName"
			, to_char(apprDate, 'yyyy.mm.dd hh24:mi') as "apprDate"
			, commt as "commt"
		from GMIL05MT t
		where
			mileageID = #mileageID#
			and apprTpID = #apprTpID#
		order by levelNo
	</select>
</sqlMap>