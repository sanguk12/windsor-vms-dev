<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="MIL01002">
	
	<!-- 마일리지등록/지급요청 리스트 조회 -->
	<select id="MIL0100201S" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select
			mileageID as "mileageID"
			, venueCD as "venueCD"
			, venueNm as "venueNm"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','VENUEGRADCD',venueGradCD,null) as "venueGradCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','SEGMENTCD',segmentCD,null) as "segmentCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','SUBSEGMENTCD',subSegmentCD,null) as "subSegmentCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','ADDRTPCD1',addrTpCD1,null) as "addrTpCD1Name"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','ADDRTPCD2',addrTpCD2,null) as "addrTpCD2Name"
			, contractDateFrom as "contractDateFrom"
			, contractDateTo as "contractDateTo"
			, contractMonthCt as "contractMonthCt"
			, apAmt as "apAmt"
			, dueTargetRate as "dueTargetRate"
			, targetRate as "targetRate"
			, msTargetRate as "msTargetRate"
			, tcontractQty as "tcontractQty"
			, gsvAmt as "gsvAmt"
			, gsvRate as "gsvRate"
			, contractAmt as "contractAmt"
			, contractTaxAmt as "contractTaxAmt"
			, addContractAmt as "addContractAmt"
			, addContractTaxAmt as "addContractTaxAmt"
			<!-- 약정금액추가 2016.10.10 -->
			, stipulationAmt as "stipulationAmt"
			, keymanAmt as "keymanAmt"
			, payRequestDate as "payRequestDate"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','MILEAGESTATECD',mileageStateCD,null) as "mileageStateCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','MILEAGEPAYTPCD',mileagePayTPCD,null) as "mileagePayTPCDName"
			, transferDate as "transferDate"
			, commt as "commt"
			, mileageStateCD as "mileageStateCD"
			, mileagePayTPCD as "mileagePayTPCD"
		from (
			select
				a.mileageID
				, a.venueCD
				, b.venueNm
				, b.venueGradCD
				, b.segmentCD
				, b.subSegmentCD
				, b.addrTpCD1
				, b.addrTpCD2
				, a.contractDateFrom
				, a.contractDateTo
				, a.contractMonthCt
				, a.apAmt
				, a.targetRate
				, a.msTargetRate
				, a.tcontractQty
				, a.gsvAmt
				, a.gsvRate
				, a.contractAmt
				, a.contractTaxAmt
				, a.addContractAmt
				, a.addContractTaxAmt
				, a.stipulationAmt
				, (select sum(payAmt) from GMIL03MT where mileageID=a.mileageID and payTpCD='ORG') as keymanAmt
				, a.payRequestDate
				, a.mileageStateCD
				, a.mileagePayTPCD
				, a.transferDate
				, a.commt
				, c.dueTargetRate
			from GMIL02MT a
			inner join GVEN01MT b
				on a.venueCD = b.venueCD
			left outer join
		        (
		          select
		            decode(sum(nvl(t1.plnenterqty,0)*nvl(t1.plnenterunitamt,0)),0,0,(sum(nvl(t3.resultqty,0)*nvl(t1.plnenterunitamt,0))/sum(nvl(t1.plnenterqty,0)*nvl(t1.plnenterunitamt,0)))*100) as dueTargetRate
		            ,t1.mileageID
		          from gmil02dt t1 inner join gmil02mt t2
		          on t1.mileageid = t2.mileageid
		          <![CDATA[
		          and t2.contractDateTo >=  #contractDateFrom#
		          and t2.contractDateFrom <=  #contractDateTo#
		          ]]>
		          inner join grlt01dt t3
		          on t2.venuecd = t3.venuecd
		          and t1.prdcd = t3.prdcd
		          and t1.eventym = t3.eventYM
		          and t1.eventym between #contractDateFrom# and #contractDateTo#
		          and diffno='9'
		          group by t1.mileageID
		          union all
		          select
		            decode(sum(nvl(t1.plnenterqty,0)*nvl(t1.plnenterunitamt,0)),0,0,(sum(nvl(t3.resultqty,0)*nvl(t1.plnenterunitamt,0))/sum(nvl(t1.plnenterqty,0)*nvl(t1.plnenterunitamt,0)))*100)
		            ,t1.mileageID
		          from gmil02dt t1 inner join gmil02mt t2
		          on t1.mileageid = t2.mileageid
		          <![CDATA[
		          and t2.contractDateTo >=  #contractDateFrom#
		          and t2.contractDateFrom <=  #contractDateTo#
		          ]]>
		          inner join grlt02dt t3
		          on t2.venuecd = t3.venuecd
		          and t1.prdcd = t3.prdcd
		          and t1.eventym = t3.eventYM
		          and t1.eventym between #contractDateFrom# and #contractDateTo#
		          group by t1.mileageID
		        ) c
		        on a.mileageID = c.mileageId
			where
				empID = #empID#
				<![CDATA[
				and a.contractDateTo >= #contractDateFrom#
				and a.contractDateFrom <= #contractDateTo#
				]]>
				<isPropertyAvailable property="payRequestDate">
					<isNotEmpty prepend="and" property="payRequestDate">
						payRequestDate = #payRequestDate#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="mileageStateCD">
					<isNotEmpty prepend="and" property="mileageStateCD">
						mileageStateCD = #mileageStateCD#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="periodLongTerm">
					<isNotEmpty prepend="and" property="periodLongTerm">
						a.contractMonthCt <![CDATA[>=]]> #periodLongTerm#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="periodShortTerm">
					<isNotEmpty prepend="and" property="periodShortTerm">
						a.contractMonthCt <![CDATA[<]]> #periodShortTerm#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="venue_S">
					<isNotEmpty prepend="and" property="venue_S">
						b.venueCD = #venue_S#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="rageSphereCD_S">
					<isNotEmpty prepend="and" property="rageSphereCD_S">
						a.rageSphereCD = #rageSphereCD_S#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="officeCD_S">
					<isNotEmpty prepend="and" property="officeCD_S">
						a.officeCD = #officeCD_S#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="mileagePayTPCD">
					<isNotEmpty prepend="and" property="mileagePayTPCD">
						mileagePayTPCD = #mileagePayTPCD#
					</isNotEmpty>
				</isPropertyAvailable>
		) t
	</select>
	
	<!-- 마일리지등록/지급요청 상세정보 -->
	<select id="MIL0100202S" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select
			mileageID as "mileageID"
			, venueCD as "venueCD"
			, venueNm as "venueNm"
			, contractDateFrom as "contractDateFrom"
			, contractDateTo as "contractDateTo"
			, contractMonthCt as "contractMonthCt"
			, apAmt as "apAmt"
			, dueTargetRate as "dueTargetRate"
			, targetRate as "targetRate"
			, msTargetRate as "msTargetRate"
			, tcontractQty as "tcontractQty"
			, gsvAmt as "gsvAmt"
			, gsvRate as "gsvRate"
			, contractAmt as "contractAmt"
			, contractTaxAmt as "contractTaxAmt"
			, addContractAmt as "addContractAmt"
			, addContractTaxAmt as "addContractTaxAmt"
			<!-- 약정금액추가 2016.10.10 -->
			, stipulationAmt as "stipulationAmt"
			, payRequestDate as "payRequestDate"
			, mileageStateCD as "mileageStateCD"
			, mileagePayTPCD as "mileagePayTPCD"
			, keymanAmt as "keymanAmt"
			, commt as "commt"
		from (
			select
				a.mileageID
				, a.venueCD
				, b.venueNm
				, a.contractDateFrom
				, a.contractDateTo
				, a.contractMonthCt
				, a.apAmt
				, a.targetRate
				, a.msTargetRate
				, a.tcontractQty
				, a.gsvAmt
				, a.gsvRate
				, a.contractAmt
				, a.contractTaxAmt
				, a.addContractAmt
				, a.addContractTaxAmt
				, a.stipulationAmt
				, a.payRequestDate
				, a.mileageStateCD
				, a.mileagePayTPCD
				, (select sum(payAmt) from GMIL03MT where mileageID=a.mileageID and payTpCD='ORG') as keymanAmt
				, a.commt
				, c.dueTargetRate
			from GMIL02MT a
			inner join GVEN01MT b
				on a.venueCD = b.venueCD
			left outer join
		        (
		          select
		            decode(sum(nvl(t1.plnenterqty,0)*nvl(t1.plnenterunitamt,0)),0,0,(sum(nvl(t3.resultqty,0)*nvl(t1.plnenterunitamt,0))/sum(nvl(t1.plnenterqty,0)*nvl(t1.plnenterunitamt,0)))*100) as dueTargetRate
		            ,t1.mileageID
		          from gmil02dt t1 inner join gmil02mt t2
		          on t1.mileageid = t2.mileageid
		          inner join grlt01dt t3
		          on t2.venuecd = t3.venuecd
		          and t1.prdcd = t3.prdcd
		          and t1.eventym = t3.eventYM
		          and diffno='9'
		          where
		          	t1.mileageID = #mileageID#
		          group by t1.mileageID
		          union all
		          select
		            decode(sum(nvl(t1.plnenterqty,0)*nvl(t1.plnenterunitamt,0)),0,0,(sum(nvl(t3.resultqty,0)*nvl(t1.plnenterunitamt,0))/sum(nvl(t1.plnenterqty,0)*nvl(t1.plnenterunitamt,0)))*100)
		            ,t1.mileageID
		          from gmil02dt t1 inner join gmil02mt t2
		          on t1.mileageid = t2.mileageid
		          inner join grlt02dt t3
		          on t2.venuecd = t3.venuecd
		          and t1.prdcd = t3.prdcd
		          and t1.eventym = t3.eventYM
		          where
		          	t1.mileageID = #mileageID#
		          group by t1.mileageID
		        ) c
		        on a.mileageID = c.mileageId
			where
				a.mileageID = #mileageID#
		)
	</select>
	
	<!-- 마일리지등록/지급요청 상세 제품정보 -->
	<select id="MIL0100203S" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select
			eventYM as "eventYM"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','KINDTPCD5',kindTpCD5,null) as "kindTpCD5Name"
			, prdNm as "prdNm"
			, factoryPrice as "factoryPrice"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','QTYUNITCD',qtyUnitCD,null) as "qtyUnitCDName"
			, contractQty as "contractQty"
			, plnEnterQty as "plnEnterQty"
			, plnEnterUnitAmt as "plnEnterUnitAmt"
			, plnAddEnterUnitAmt as "plnAddEnterUnitAmt"
			, rltEnterQty as "rltEnterQty"
			, rltEnterUnitAmt as "rltEnterUnitAmt"
			, addEnterUnitAmt as "addEnterUnitAmt"
			, payAmt as "payAmt"
			, addPayAmt as "addPayAmt"
			, prdCD as "prdCD"
			, eu as "eu"
		from (
			select
				a.eventYM
				, b.kindTpCD5
				, b.prdNm
				, a.factoryPrice
				, b.qtyUnitCD
				, a.contractQty
				, a.plnEnterQty
				, a.plnEnterUnitAmt
				, a.plnAddEnterUnitAmt
				, a.rltEnterQty
				, a.rltEnterUnitAmt
				, a.addEnterUnitAmt
				, a.PayAmt
				, a.addPayAmt
				, b.prdCD
				, b.eu
			from GMIL02DT a
			inner join GPRD01MT b
				on a.prdCD = b.prdCD
			where
				a.mileageID = #mileageID#
		) t
	</select>
	
	<!-- 마일리지계약ID
	<insert id="MIL0100200I" parameterClass="com.kia.mil.model.GMIL01MT">
		insert into GMIL01MT (
			mileageID
			, dkmdTpcD
			, empID
			, rageSphereCD
			, officeCD
			, teamCD
			, regID
			, regDate
		)
		select
			mileageID
			, dkmdTpcD
			, empID
			, rageSphereCD
			, officeCD
			, teamCD
			, #userID#
			, sysdate
		from (
			select
				nvl(max(mileageID)+1, rpad(to_char(sysdate, 'yyyymm'), 10, '0')+1) as mileageID
			from GMIL01MT
			where
				substr(mileageID, 0, 6) = to_char(sysdate, 'yyyymm')
		) a
		, GEMP01MT b
		where
			b.empID = #empID#
	</insert>
	 -->
	
	<!-- 마일리지계약ID -->
	<select id="MIL0100200S" parameterClass="com.kia.mil.model.GMIL01MT" resultClass="java.util.LinkedHashMap">
		select
			nvl(max(mileageID)+1, rpad(to_char(sysdate, 'yyyymm'), 10, '0')+1) as "mileageID"
		from GMIL01MT
		where
			substr(mileageID, 0, 6) = to_char(sysdate, 'yyyymm')
	</select>
	
	<!-- 마일리지 정보 등록  -->
	<!-- 
	<insert id="MIL0100201I" parameterClass="com.kia.mil.model.GMIL01MT">
		insert into GMIL01MT (
			mileageID
			, venueCD
			, dkmdTpcD
			, empID
			, rageSphereCD
			, officeCD
			, teamCD
			, contractDateFrom
			, contractDateTo
			, contractMonthCt
			, apAmt
			, msTargetRate
			, tcontractQty
			, gsvAmt
			, gsvRate
			, contractAmt
			, contractTaxAmt
			, addContractAmt
			, addContractTaxAmt 
			, stipulationAmt
			, subtractAmt
			, payRequestDate
			, mileageStateCD
			, mileagePayTPCD
			, regID
			, regDate
		)
		select
			#mileageID#
			, #venueCD#
			, dkmdTpcD
			, empID
			, rageSphereCD
			, officeCD
			, teamCD
			, #contractDateFrom#
			, #contractDateTo#
			, #contractMonthCt#
			, #apAmt#
			, #msTargetRate#
			, #tcontractQty#
			, #gsvAmt#
			, #gsvRate#
			, #contractAmt#
			, #contractTaxAmt#
			, #addContractAmt#
			, #addContractTaxAmt#
			, #stipulationAmt#
			, 0
			, #payRequestDate#
			, #mileageStateCD#
			, #mileagePayTPCD#
			, #userID#
			, sysdate
		from GEMP01MT
		where
			empID = #empID#
	</insert>
	 -->
	 
	<!-- 마일리지 제품 등록  -->
	<insert id="MIL0100202I" parameterClass="com.kia.mil.model.GMIL01MT">
		insert into GMIL02DT (
			mileageID
			, prdCD
			, factoryPrice
			, contractQty
			, enterQty
			, enterUnitAmt
			, addEnterUnitAmt
			, payAmt
			, addPayAmt
			, regID
			, regDate
		)
		values (
			#mileageID#
			, #prdCD#
			, #factoryPrice#
			, #contractQty#
			, #enterQty#
			, #enterUnitAmt#
			, #addEnterUnitAmt#
			, #payAmt#
			, #addPayAmt#
			, #userID#
			, sysdate
		)
	</insert>
	
	<!-- 마일리지 정보 수정  -->
	<update id="MIL0100201U" parameterClass="com.kia.mil.model.GMIL01MT">
		update GMIL02MT
		set
			venueCD = #venueCD#
			, contractDateFrom = #contractDateFrom#
			, contractDateTo = #contractDateTo#
			, contractMonthCt = #contractMonthCt#
			, apAmt = #apAmt#
			, targetRate = #targetRate#
			, msTargetRate = #msTargetRate#
			, tcontractQty = #tcontractQty#
			, gsvAmt = #gsvAmt#
			, gsvRate = #gsvRate#
			, contractAmt = #contractAmt#
			, contractTaxAmt = #contractTaxAmt#
			, addContractAmt = #addContractAmt#
			, addContractTaxAmt = #addContractTaxAmt#
			, stipulationAmt = #stipulationAmt#	<!-- 지급금액과 약정금액분리로인한 약정금액추가 2016.10.10 -->
			, subtractAmt = 0
			, payRequestDate = #payRequestDate#
			, mileageStateCD = #mileageStateCD#
			, mileagePayTPCD = #mileagePayTPCD#
			, commt = #commt#
			, chgID = #userID#
			, chgDate = sysdate
		where
			mileageID = #mileageID#
	</update>
	
	<!-- 마일리지 제품 수정  -->
	<update id="MIL0100202U" parameterClass="com.kia.mil.model.GMIL01MT">
		update GMIL02DT
		set
			factoryPrice = #factoryPrice#
			, contractQty = #contractQty#
			, rltEnterQty = #rltEnterQty#
			, rltEnterUnitAmt = #rltEnterUnitAmt#
			, addEnterUnitAmt = #addEnterUnitAmt#
			, payAmt = #payAmt#
			, addPayAmt = #addPayAmt#
			, chgID = #userID#
			, chgDate = sysdate
		where
			mileageID = #mileageID#
			and prdCD = #prdCD#
			and eventYM = #eventYM#
	</update>
	
	<!-- 마일리지 정보 삭제  -->
	<delete id="MIL0100201D" parameterClass="com.kia.mil.model.GMIL01MT">
		delete from GMIL02MT
		where
			mileageID = #mileageID#
	</delete>
	
	<!-- 마일리지 제품 삭제  -->
	<delete id="MIL0100202D" parameterClass="com.kia.mil.model.GMIL01MT">
		delete from GMIL02DT
		where
			mileageID = #mileageID#
			and prdCD = #prdCD#
	</delete>
	
	<!-- 지급키맨등록 해당업소에 속한 키맨목록 -->
	<select id="MIL0100204S" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select
			keymanID as "keymanID"
			, keymanNm as "keymanNm"
			, birthDate as "birthDate"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','BANKCD',bankCD,null) as "bankCDName"
			, accountNo as "accountNo"
			, pkeymanYN as "pkeymanYN"
			, holderNm as "holderNm"
			, bankCD as "bankCD"
		from (
			select
				keymanID
				, keymanNm
				, birthDate
				, accountNo
				, bankCD
				, pkeymanYN
				, holderNm
			from GKEY01MT
			where
				venueCD = #venueCD#
				and activeYN = 'Y'
				and keymanID not in (
					select keymanID
					from GMIL03MT
					where
						mileageID = #mileageID#
						and payTpCD = #payTpCD#
				)
		)
		order by pkeymanYN desc, keymanID
	</select>
	
	<!-- 지급키맨등록 키맨목록 -->
	<select id="MIL0100205S" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select
			keymanID as "keymanID"
			, keymanNm as "keymanNm"
			, birthDate as "birthDate"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','BANKCD',bankCD,null) as "bankCDName"
			, accountNo as "accountNo"
			, payAmt as "payAmt"
			, pkeymanYN as "pkeymanYN"
			, holderNm as "holderNm"
			, bankCD as"bankCD"
		from (
			select
				b.keymanID
				, a.keymanNm
				, a.birthDate
				, b.accountNo
				, b.bankCD
				, b.payAmt
				, a.pkeymanYN
				, b.holderNm
			from GKEY01MT a
			inner join GMIL03MT b
				on a.keymanID = b.keymanID
			where
				b.mileageID = #mileageID#
				and b.payTpCD = #payTpCD#
				and venueCD = #venueCD#
		)
		order by pkeymanYN desc, keymanID
	</select>
	
	<!-- 지급키맨 등록 -->
	<insert id="MIL0100203I" parameterClass="com.kia.mil.model.GMIL01MT">
		insert into GMIL03MT (
			mileageID
			, payTpCD
			, keymanID
			, bankCD
			, accountNo
			, payAmt
			, regID
			, regDate
			, holderNm
		)
		values (
			#mileageID#
			, #payTpCD#
			, #keymanID#
			, #bankCD#
			, #accountNo#
			, #payAmt#
			, #userID#
			, sysdate
			, #holderNm#
		)
	</insert>
	
	<!-- 지급키맨 수정 -->
	<update id="MIL0100203U" parameterClass="com.kia.mil.model.GMIL01MT">
		update GMIL03MT
		set
			bankCD = #bankCD#
			, accountNo = #accountNo#
			, payAmt = #payAmt#
			, holderNm = #holderNm#
		where
			mileageID = #mileageID#
			and payTpCD = #payTpCD#
			and keymanID = #keymanID#
	</update>
	
	<!-- 지급키맨 삭제 -->
	<delete id="MIL0100203D" parameterClass="com.kia.mil.model.GMIL01MT">
		delete from GMIL03MT
		where
			mileageID = #mileageID#
			and payTpCD = #payTpCD#
			and keymanID = #keymanID#
	</delete>
	
	<!-- 마일리지 제품 전체삭제  -->
	<delete id="MIL0100204D" parameterClass="com.kia.mil.model.GMIL01MT">
		delete from GMIL02DT
		where
			mileageID = #mileageID#
	</delete>
	
	<!-- 마일리지 키맨 전체삭제  -->
	<delete id="MIL0100205D" parameterClass="com.kia.mil.model.GMIL01MT">
		delete from GMIL03MT
		where
			mileageID = #mileageID#
			and payTpCD = #payTpCD#
	</delete>
	
	<!-- 마일리지 지급요청, 취소 -->
	<update id="MIL0100204U" parameterClass="com.kia.mil.model.GMIL01MT">
		update GMIL02MT
		set
			mileageStateCD = #mileageStateCD#
			, lapprLevelNo = (
				select
					max(lv) as lv
				from (
					select
						level as lv
						, apprGrpNm
						, empID
					from GAPP01DT t
					where
						apprTpID = #apprTpID#
					connect by prior papprGrpID = apprGrpID
					start with apprGrpID = (
						select
							apprGrpID
						from GAPP01DT
						Where
							empID = #empID#
							and apprTpID = #apprTpID#
					)
				)
			)
			, commt = ''
			, chgID = #userID#
			, chgDate = sysdate
		where
			mileageID = #mileageID#
	</update>
	
	<!-- 마일리지등록/지급요청 엑셀 조회 -->
	<select id="MIL0100206S" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select
			mileageID as "mileageID"
			, venueCD as "venueCD"
			, venueNm as "venueNm"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','VENUEGRADCD',venueGradCD,null) as "venueGradCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','SEGMENTCD',segmentCD,null) as "segmentCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','SUBSEGMENTCD',subSegmentCD,null) as "subSegmentCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','ADDRTPCD1',addrTpCD1,null) as "addrTpCD1Name"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','ADDRTPCD2',addrTpCD2,null) as "addrTpCD2Name"
			, contractDateFrom as "contractDateFrom"
			, contractDateTo as "contractDateTo"
			, contractMonthCt as "contractMonthCt"
			, apAmt as "apAmt"
			, dueTargetRate as "dueTargetRate"
			, targetRate as "targetRate"
			, msTargetRate as "msTargetRate"
			, tcontractQty as "tcontractQty"
			, gsvAmt as "gsvAmt"
			, gsvRate as "gsvRate"
			, contractAmt as "contractAmt"
			, contractTaxAmt as "contractTaxAmt"
			, addContractAmt as "addContractAmt"
			, addContractTaxAmt as "addContractTaxAmt"
			<!-- 약정금액추가 2016.10.10 -->
			, stipulationAmt as "stipulationAmt"
			, keymanAmt as "keymanAmt"
			, payRequestDate as "payRequestDate"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','MILEAGESTATECD',mileageStateCD,null) as "mileageStateCDName"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','MILEAGEPAYTPCD',mileagePayTPCD,null) as "mileagePayTPCDName"
			, transferDate as "transferDate"
			, commt as "commt"
			, eventYM as "eventYM"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','KINDTPCD5',kindTpCD5,null) as "kindTpCD5Name"
			, prdNm as "prdNm"
			, factoryPrice as "factoryPrice"
			, getLangDesc(#companyID#,#languageCD#,'F_CODE','QTYUNITCD',qtyUnitCD,null) as "qtyUnitCDName"
			, contractQty as "contractQty"
			, plnEnterQty as "plnEnterQty"
			, plnEnterUnitAmt as "plnEnterUnitAmt"
			, plnAddEnterUnitAmt as "plnAddEnterUnitAmt"
			, rltEnterQty as "rltEnterQty"
			, rltEnterUnitAmt as "rltEnterUnitAmt"
			, payAmt as "payAmt"
			, addEnterUnitAmt as "addEnterUnitAmt"
			, addPayAmt as "addPayAmt"
		from (
			select
				a.mileageID
				, a.venueCD
				, b.venueNm
				, b.venueGradCD
				, b.segmentCD
				, b.subSegmentCD
				, b.addrTpCD1
				, b.addrTpCD2
				, a.contractDateFrom
				, a.contractDateTo
				, a.contractMonthCt
				, a.apAmt
				, e.dueTargetRate
				, a.targetRate
				, a.msTargetRate
				, a.tcontractQty
				, a.gsvAmt
				, a.gsvRate
				, a.contractAmt
				, a.contractTaxAmt
				, a.addContractAmt
				, a.addContractTaxAmt
				, a.stipulationAmt
				, (select sum(payAmt) from GMIL03MT where mileageID=a.mileageID and payTpCD='ORG') as keymanAmt
				, a.payRequestDate
				, a.mileageStateCD
				, a.mileagePayTPCD
				, a.transferDate
				, a.commt
				, c.eventYM
				, d.kindTpCD5
				, d.prdNm
				, c.factoryPrice
				, d.qtyUnitCD
				, c.contractQty
				, c.plnEnterQty
				, c.plnEnterUnitAmt
				, c.plnAddEnterUnitAmt
				, c.rltEnterQty
				, c.rltEnterUnitAmt
				, c.payAmt
				, c.addEnterUnitAmt
				, c.addPayAmt
				, c.prdCD
			from GMIL02MT a
			inner join GVEN01MT b
				on a.venueCD = b.venueCD
			inner join GMIL02DT c
				on a.mileageID = c.mileageID
			inner join GPRD01MT d
				on c.prdCD = d.prdCD
			left outer join
		        (
		          select
		            decode(sum(nvl(t1.plnenterqty,0)*nvl(t1.plnenterunitamt,0)),0,0,(sum(nvl(t3.resultqty,0)*nvl(t1.plnenterunitamt,0))/sum(nvl(t1.plnenterqty,0)*nvl(t1.plnenterunitamt,0)))*100) as dueTargetRate
		            ,t1.mileageID
		          from gmil02dt t1 inner join gmil02mt t2
		          on t1.mileageid = t2.mileageid
		          <![CDATA[
		          and t2.contractDateTo >=  #contractDateFrom#
		          and t2.contractDateFrom <=  #contractDateTo#
		          ]]>
		          inner join grlt01dt t3
		          on t2.venuecd = t3.venuecd
		          and t1.prdcd = t3.prdcd
		          and t1.eventym = t3.eventYM
		          and t1.eventym between #contractDateFrom# and #contractDateTo#
		          and diffno='9'
		          group by t1.mileageID
		          union all
		          select
		            decode(sum(nvl(t1.plnenterqty,0)*nvl(t1.plnenterunitamt,0)),0,0,(sum(nvl(t3.resultqty,0)*nvl(t1.plnenterunitamt,0))/sum(nvl(t1.plnenterqty,0)*nvl(t1.plnenterunitamt,0)))*100)
		            ,t1.mileageID
		          from gmil02dt t1 inner join gmil02mt t2
		          on t1.mileageid = t2.mileageid
		          <![CDATA[
		          and t2.contractDateTo >=  #contractDateFrom#
		          and t2.contractDateFrom <=  #contractDateTo#
		          ]]>
		          inner join grlt02dt t3
		          on t2.venuecd = t3.venuecd
		          and t1.prdcd = t3.prdcd
		          and t1.eventym = t3.eventYM
		          and t1.eventym between #contractDateFrom# and #contractDateTo#
		          group by t1.mileageID
		        ) e
		        on a.mileageID = e.mileageId
			where
				empID = #empID#
				<![CDATA[
				and a.contractDateTo >= #contractDateFrom#
				and a.contractDateFrom <= #contractDateTo#
				]]>
				<isPropertyAvailable property="payRequestDate">
					<isNotEmpty prepend="and" property="payRequestDate">
						payRequestDate = #payRequestDate#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="mileageStateCD">
					<isNotEmpty prepend="and" property="mileageStateCD">
						mileageStateCD = #mileageStateCD#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="periodLongTerm">
					<isNotEmpty prepend="and" property="periodLongTerm">
						a.contractMonthCt <![CDATA[>=]]> #periodLongTerm#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="periodShortTerm">
					<isNotEmpty prepend="and" property="periodShortTerm">
						a.contractMonthCt <![CDATA[<]]> #periodShortTerm#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="venue_S">
					<isNotEmpty prepend="and" property="venue_S">
						b.venueCD = #venue_S#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="rageSphereCD_S">
					<isNotEmpty prepend="and" property="rageSphereCD_S">
						a.rageSphereCD = #rageSphereCD_S#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="officeCD_S">
					<isNotEmpty prepend="and" property="officeCD_S">
						a.officeCD = #officeCD_S#
					</isNotEmpty>
				</isPropertyAvailable>
				<isPropertyAvailable property="mileagePayTPCD">
					<isNotEmpty prepend="and" property="mileagePayTPCD">
						mileagePayTPCD = #mileagePayTPCD#
					</isNotEmpty>
				</isPropertyAvailable>
		) t
		order by mileageID, venueCD, prdCD, eventYM
	</select>
	<!-- Plan승인요청 -->
	<insert id="MIL0100204I" parameterClass="com.kia.mil.model.GMIL01MT">
		insert into GMIL05MT (
			mileageID
			, levelNo
			, apprTpID
			, apprGrpNm
			, empID
			, mileageStateCD
			, apprDate
			, regID
			, regDate
		)
		select
			#mileageID#
			, lv
			, #apprTpID#
			, apprGrpNm
			, empID
			, (
				case when lv=1 then '50'
				when lv=2 then '20'
				end
			) as mileageStateCD
			, (
				case when lv=1 then sysdate
				end
			) as apprDate
			, #userID#
			, sysdate
		from (
			select
				level as lv
				, apprGrpNm
				, empID
			from GAPP01DT t
			where
				apprTpID = #apprTpID#
			connect by prior papprGrpID = apprGrpID
			start with apprGrpID = (
				select
					apprGrpID
				from GAPP01DT
				Where
					empID = #empID#
					and apprTpID = #apprTpID#
			)  and apprTpID = #apprTpID#
		)
	</insert>

	<delete id="MIL0100206D" parameterClass="com.kia.mil.model.GMIL01MT">
		delete from GMIL05MT
		where
			mileageID = #mileageID#
		and apprTpID = #apprTpID#
	</delete>

	<select id="MIL0100207S" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select
			eventYM as "eventYM"
			, prdCD as "prdCD"
			, sum(resultQty) as "rltEnterQty"
			, sum(resultunitamt) as "rltEnterUnitAmt"
			, sum(payamt) as "payAmt"
		from
		(
		select
			t1.resultQty
			, t1.resultunitamt
			, t1.payamt 
			, t1.eventYM
			, t1.prdCD
		from grlt01dt t1 inner join grlt01mt t2
		on t1.eventym = t2.eventYM 
		and t1.venuecd = t2.venuecd
		and t1.diffNo = t2.diffNo
		where t2.apprStateCD='50'
		and t2.programCD = 'G1'
		and t1.eventYM between #contractDateFrom# and #contractDateTo#
		and t1.venuecd = #venueCD#
		union all
		select
			resultQty
			, resultunitamt
			, payamt
			, eventYM
			, prdCD
		from grlt02dt
		where apprStateCD='50'
		and eventYM between #contractDateFrom# and #contractDateTo#
		and venuecd = #venueCD#
		)
		group by eventYM, prdCD
	</select>
</sqlMap>